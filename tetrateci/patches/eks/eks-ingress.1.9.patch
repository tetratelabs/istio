diff --git a/pkg/test/framework/components/echo/kube/deployment.go b/pkg/test/framework/components/echo/kube/deployment.go
index 9a0f7282cc..e9203dee2b 100644
--- a/pkg/test/framework/components/echo/kube/deployment.go
+++ b/pkg/test/framework/components/echo/kube/deployment.go
@@ -735,6 +735,9 @@ spec:
 			// LoadBalancer may not be suppported and the command doesn't have NodePort fallback logic that the tests do
 			cmd = append(cmd, "--ingressIP", istiodAddr.IP.String())
 		}
+
+		cmd = append(cmd, "--ingressIP", istiodAddr.IP.String())
+
 		// make sure namespace controller has time to create root-cert ConfigMap
 		if err := retry.UntilSuccess(func() error {
 			_, _, err = istioCtl.Invoke(cmd)
diff --git a/pkg/test/framework/components/istio/util.go b/pkg/test/framework/components/istio/util.go
index d9de316906..abe6165113 100644
--- a/pkg/test/framework/components/istio/util.go
+++ b/pkg/test/framework/components/istio/util.go
@@ -153,6 +153,14 @@ func getRemoteServiceAddress(s *kube.Settings, cluster cluster.Cluster, ns, labe
 	}
 
 	if len(svc.Status.LoadBalancer.Ingress) == 0 || svc.Status.LoadBalancer.Ingress[0].IP == "" {
+		if svc.Status.LoadBalancer.Ingress[0].IP == "" && svc.Status.LoadBalancer.Ingress[0].Hostname != "" {
+			ip, err := net.LookupIP(svc.Status.LoadBalancer.Ingress[0].Hostname)
+			if err != nil {
+				return nil, false, err
+			}
+			return net.TCPAddr{IP: ip[0], Port: port}, true, nil
+		}
+
 		return nil, false, fmt.Errorf("service %s is not available yet: %s/%s", svcName, svc.Namespace, svc.Name)
 	}
 
diff --git a/tests/integration/pilot/ingress_test.go b/tests/integration/pilot/ingress_test.go
index 3e0ab9f184..874503fd6f 100644
--- a/tests/integration/pilot/ingress_test.go
+++ b/tests/integration/pilot/ingress_test.go
@@ -19,6 +19,7 @@ import (
 	"context"
 	"fmt"
 	"io/ioutil"
+	"net"
 	"path/filepath"
 	"testing"
 	"time"
@@ -278,6 +279,12 @@ spec:
 					if err != nil {
 						return err
 					}
+
+					if len(ing.Status.LoadBalancer.Ingress) == 1 {
+						ip, _ := net.LookupIP(ing.Status.LoadBalancer.Ingress[0].Hostname)
+						ing.Status.LoadBalancer.Ingress[0].IP = ip[0].String()
+					}
+
 					if len(ing.Status.LoadBalancer.Ingress) != 1 || ing.Status.LoadBalancer.Ingress[0].IP != ip {
 						return fmt.Errorf("unexpected ingress status, got %+v want %v", ing.Status.LoadBalancer, ip)
 					}
