name: Make a release

on:
  workflow_dispatch: 
    inputs:
      tag:
        description: Manual Tag [e.g. 1.7.8-tetrate-v0]
        required: true
      type:
        description: Build Type [fips or default]
        required: true
        default: "default"

jobs:
  build_fips_proxy:
    # Only run this job when the release type equals "fips".
    if: ${{ github.event.inputs.type == 'fips' }}
    name: build fips proxy binary
    timeout-minutes: 1440 # 12 hours
    runs-on: ubuntu-latest
    steps:
      - name: Get normalized tag
        id: get_minor_ver
        run: echo ::set-output name=NORMALIZED_TAG::$(echo $TAG | sed 's/-.*//g')
        shell: bash
        env:
          TAG: ${{ github.event.inputs.tag }}

      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: 'istio/proxy'
          ref: ${{ steps.get_minor_ver.outputs.NORMALIZED_TAG }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Tweak make recipe
        env:
          RELEASE_GCS_PATH: gs://getistio-build/proxy-fips
        # 1) remove unnecessary dependency on naive "build" target 
        # 2) remove "-p" flag to not push and build container, 
        # 3) replace RELEASE_GCS_PATH var with the literal due to docker build.
        # from push_release.
        run: |
          ESCAPED_RELEASE_GCS_PATH=$(printf '%s\n' "$RELEASE_GCS_PATH" | sed -e 's/[\/&]/\\&/g')
          sed -i "s/\-p//g; s/push_release: build/push_release:/g; s/\"\$(RELEASE_GCS_PATH)\"/${ESCAPED_RELEASE_GCS_PATH}/g" Makefile.core.mk

      - name: Tweak release-binary script
        # 1) Setup in-docker auth against gcloud
        # 2) Remove unnecessary debug build
        # Note that /work is the mount destination of the current home of make command with BUILD_WITH_CONTAINER=1.
        run: |
          CREDENTIAL_FILE_NAME=$(echo ${GOOGLE_APPLICATION_CREDENTIALS} | awk -F/ '{print $NF}')
          cp scripts/release-binary.sh scripts/release-binary.sh.tmp
          echo gcloud auth activate-service-account --key-file="/work/${CREDENTIAL_FILE_NAME}" > scripts/release-binary.sh
          cat scripts/release-binary.sh.tmp >> scripts/release-binary.sh
          sed -i 's/release release\-symbol debug/release release\-symbol/' scripts/release-binary.sh
          cat scripts/release-binary.sh

      - name: Add FIPS flag
        run: echo "build --define boringssl=fips" >> .bazelrc

      - name: Build and push
        env:
          BUILD_WITH_CONTAINER: 1 
        run: make push_release

  make_release:    
    name: release-builder-run
    runs-on: ubuntu-latest
    needs: [build_fips_proxy]
    env:
      HUB: ${{ secrets.CLOUDSMITH_HUB }}

    steps:
      - name: Checkout to choosen tag
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.tag }}
          fetch-depth: 0

      - name: Login to CloudSmith
        uses: docker/login-action@v1
        with:
          registry: ${{ env.HUB }}
          username: ${{ secrets.CLOUDSMITH_USER }}
          password: ${{ secrets.CLOUDSMITH_API_KEY }}

      - name: Get minor version
        id: get_minor_ver
        run: echo ::set-output name=REL_BRANCH_VER::$(echo $TAG | grep -Eo '[0-9]+\.[0-9]+')
        shell: bash
        env:
          TAG: ${{ github.event.inputs.tag }}

      - name: Run release builder
        env:
          CLOUDSMITH_USER: ${{ secrets.CLOUDSMITH_USER }}
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
          TAG: ${{ github.event.inputs.tag }}
          BUILD: ${{ github.event.inputs.type }}
          REL_BRANCH_VER: ${{ steps.get_minor_ver.outputs.REL_BRANCH_VER }}
        run: bash ./tetrateci/create_istio_release.sh
