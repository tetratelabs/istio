name: e2e-tests

on:
  push:
    tags:
      - 'test-*'

env:
  HUB: ${{ secrets.TEST_HUB }}

jobs:
  create-test-images:
    name: create-test-images
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Get Registry
        id: get_registry
        run: |
          [[ ${HUB} == *.* ]] && REGISTRY=$(echo ${HUB} | cut -d/ -f1)
          echo REGISTRY=${REGISTRY}
          echo REGISTRY=${REGISTRY} >> $GITHUB_ENV

      - name: docker-login-non-docker
        uses: docker/login-action@v1
        if: ${{ env.REGISTRY != null }}
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.TEST_HUB_USER }}
          password: ${{ secrets.TEST_HUB_PASS }}

      - name: docker-login-docker
        uses: docker/login-action@v1
        if: ${{ env.REGISTRY == null }}
        with:
          username: ${{ secrets.TEST_HUB_USER }}
          password: ${{ secrets.TEST_HUB_PASS }}
      
      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\/}
        shell: bash

      - name: build and push images
        # TODO: Hack Alert https://github.com/actions/runner/issues/241
        shell: 'script -q -e -c "bash {0}"'
        run: |
          make docker push
        env:
          TAG: ${{ steps.get_tag.outputs.TAG }}

  eks-e2e-test:
    name: eks-e2e-test
    runs-on: ubuntu-latest
    needs: [create-test-images]

    strategy:
      matrix:
        version: [1.18, 1.17, 1.16]

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: aws-config
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION  }}

      - name: set up go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\/}
        shell: bash

      - name: Get minor version
        id: get_minor_ver
        run: echo ::set-output name=REL_BRANCH_VER::$(echo $TAG | grep -Eo '[0-9]+\.[0-9]+')
        shell: bash
        env:
          TAG: ${{ steps.get_tag.outputs.TAG }}

      - name: eks-cluster-create
        run: bash ./tetrateci/create_eks_cluster.sh
        env:
          VER: ${{ matrix.version }}

      - name: integration-tests
        run: bash ./tetrateci/test_${REL_BRANCH_VER}.sh
        env:
          TAG: ${{ steps.get_tag.outputs.TAG }}
          REL_BRANCH_VER: ${{ steps.get_minor_ver.outputs.REL_BRANCH_VER }}
          CLUSTER: eks

      - name: eks-cluster-delete
        if: always()
        run: bash ./tetrateci/cleanup_eks_cluster.sh
        env:
          VER: ${{ matrix.version }}
  
  gke-e2e-test:
    name: gke-e2e-test
    runs-on: ubuntu-latest
    # TODO gke test modify iop yaml so we need to run it at the end to not interfere in eks and aks test
    # removing aks-e2e-test as the credentials are not set up
    needs: [create-test-images, eks-e2e-test]

    strategy:
      matrix:
        include:
          - version: "1.18.12-gke.1201"
            channel: "rapid"
          - version: "1.17.14-gke.2600"
            channel: "regular"
          - version: "1.16.15-gke.6000"
            channel: "stable"
    
    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@master
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: set up go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\/}
        shell: bash
      
      - name: Get minor version
        id: get_minor_ver
        run: echo ::set-output name=REL_BRANCH_VER::$(echo $TAG | grep -Eo '[0-9]+\.[0-9]+')
        shell: bash
        env:
          TAG: ${{ steps.get_tag.outputs.TAG }}

      - name: gke-cluster-create
        run: bash ./tetrateci/create_gke_cluster.sh
        env:
          VER: ${{ matrix.version }}
          CHAN: ${{ matrix.channel  }}

      - name: integration-tests
        run: bash ./tetrateci/test_${REL_BRANCH_VER}.sh
        env:
          TAG: ${{ steps.get_tag.outputs.TAG }}
          REL_BRANCH_VER: ${{ steps.get_minor_ver.outputs.REL_BRANCH_VER }}
          CLUSTER: gke

      - name: gke-cluster-delete
        if: always()
        run: bash ./tetrateci/cleanup_gke_cluster.sh
        env:
          VER: ${{ matrix.version }}

  aks-e2e-test:
    ## TODO: temporarily disabling it till credentials are set
    if: ${{ false }}
    name: aks-e2e-test
    runs-on: ubuntu-latest
    needs: [create-test-images]

    strategy:
      matrix:
        version: [1.18.14, 1.17.13, 1.16.15]

    steps:
      - name: checkout
        uses: actions/checkout@v2

      - name: Set up Cloud SDK
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} 

      - name: set up go 1.15
        uses: actions/setup-go@v1
        with:
          go-version: 1.15

      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\/}
        shell: bash

      - name: Get minor version
        id: get_minor_ver
        run: echo ::set-output name=REL_BRANCH_VER::$(echo $TAG | grep -Eo '[0-9]+\.[0-9]+')
        shell: bash
        env:
          TAG: ${{ steps.get_tag.outputs.TAG }}

      - name: aks-cluster-create
        run: bash ./tetrateci/create_aks_cluster.sh
        env:
          VER: ${{ matrix.version }}
          RESOURCE: ${{ secrets.AZURE_RESOURCE }}

      - name: integration-tests
        run: bash ./tetrateci/test_${REL_BRANCH_VER}.sh
        env:
          TAG: ${{ steps.get_tag.outputs.TAG }}
          REL_BRANCH_VER: ${{ steps.get_minor_ver.outputs.REL_BRANCH_VER }}
          CLUSTER: aks

      - name: aks-cluster-delete
        if: always()
        run: bash ./tetrateci/cleanup_aks_cluster.sh
        env:
          VER: ${{ matrix.version }}
          RESOURCE: ${{ secrets.AZURE_RESOURCE }}
    
  create-new-tag:
    name: create-new-tag
    runs-on: ubuntu-latest
    needs: [eks-e2e-test, gke-e2e-test, aks-e2e-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\/test-/}
        shell: bash

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
        with:
          tag_name: ${{ steps.get_tag.outputs.TAG }}
          release_name: Tetrate Istio 
          draft: false
          prerelease: false

  make_release:    
    needs: [create-new-tag]

    name: release-builder-run
    runs-on: ubuntu-latest
    env:
      # Overriding workflow level HUB for deploy
      HUB: ${{ secrets.DEPLOY_HUB }}

    steps:
      - name: Checkout tetrate branch
        uses: actions/checkout@v2

      - name: Login to Bintray
        uses: docker/login-action@v1
        with:
          registry: ${{ env.HUB }}
          username: ${{ secrets.BINTRAY_USER }}
          password: ${{ secrets.BINTRAY_API_KEY }}

      - name: Get the tag
        id: get_tag
        run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\/test-/}
        shell: bash

      - name: run release builder
        env:
          BINTRAY_USER: ${{ secrets.BINTRAY_USER }}
          API_KEY: ${{ secrets.BINTRAY_API_KEY }}
          TAG: ${{ steps.get_tag.outputs.TAG }}
          BINTRAY_API: ${{ secrets.BINTRAY_ARCHIVE_API }}
        # not using the official build container 
        run: ./tetrateci/create_istio_release.sh
